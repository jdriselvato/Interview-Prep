<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>// Divide &amp; Conquer: Quicksort
/* How I understand it:
 - Merge sort gave all the power to the mangers to figure it out by dividing the array in half. while the last step was sorting the last part of the array with merge.
 - Quicksort, does the sorting by a "pivot" number to separate the array and then giving it to the managers to sort. It's recursive like merge sort but an initial sort is done before it's giving to the manager.
 */

/* What I don't understand
 - What happens after the managers had their turn? Does the array completely return sorted? Seems like it should.
 *    ANSWER:
 *        - üî•the if start &gt;= end { return } does it
 */ 

// HANG UP 1: How it ends
// - [wrong] my misunderstanding was the sub managers took the entire array. no they take a left or right section but not the pivot
// - üî•the above is wrong. We pass the entire array but the start and end is the focus. That's what the pivotIndex was so important with dividing it up again

// HANG UP 2: since the two sections are uneven.. the for loop breaks if we're doing start to end because at some point end is going to get larger then start
// -    SOLUTION:
// -       üî• this was wrong thinking but if start &gt;= end { return } would protect against that.

func quickSort(_ array: [Int]) -&gt; [Int] {
    var sortingArray = array
    helper(&amp;sortingArray, 0, sortingArray.count - 1)
    return sortingArray
}
var numRan = 0 // just to prevent playgrounds from crashing
func helper(_ array: inout [Int], _ start: Int, _ end: Int) {
    if start &gt;= end || numRan &gt;= 100 { return }
    numRan += 1
    let pivot = array[start] // the pivot "divider"
    
    var tempLeft = [Int]() // left of pivot
    var tempRight = [Int]() // right of pivot
    // start+1 because we hold [0] in pivot
    print("\(start) to \(end) - \(array) with pivot: \(pivot)")
    for i in start+1 ... end { // Starting from start+1 because pivot is already in temp memory
        if array[i] &lt; pivot { // if the num is less than pivot put in left array as it's left of pivot
            tempLeft.append(array[i])
        } else { // if it's great or same, put it to the right of pivot
            tempRight.insert(array[i], at: 0) // insert in the front of the array
        }
    }
    
    /// thought 1: -- nope
    // now we have two sides and a middle pivot, what do we do?
    // we need the next level to take tempLeft to pivot-1 &amp; pivot+1 to end and sort again
    // but we need to pass &amp;array not the two sides. So does that mean...
    
    /// thought 2:
    // instead lets use start and end to enter the new values into &amp;array
    let tempArray = tempLeft + [pivot] + tempRight // make new array order with pivot in center
    
    print("temp: \(tempArray.count) vs \(array.count)")
    print("\(tempLeft) + \([pivot]) + \(tempRight)")
    var j = 0
    for i in start ... end { // go through the &amp;array and replace with tempArray sorted info
        array[i] = tempArray[j]
        j += 1
    }
    
    // ‚ÄºÔ∏è the problem is i don't know the pivot index in regards to the &amp;array. Start and end are in regards to array
    let pivotIndex = (start + tempLeft.count) // üî• why? cause we know start is somewhere in the &amp;array and pivot is at tempLeft.count (or tempLeft.count-1 + 1)
    
    print("--- end sorting \(array)")
    print("proposed new left helper on \(array),\n\t\(start), \(pivotIndex)")
    helper(&amp;array, start, pivotIndex) // from original start to pivot index
    
    print("proposed new right helper on \(array),\n\t\(pivotIndex+1), \(end)")
    helper(&amp;array, pivotIndex+1, end) // from after pivot to end original end
}

let shuffled = [3, 33, 33, 100, 11, 2, 5, 10, 22, 7, 3, 15].shuffled()
print(quickSort(shuffled))

/// POST THOUGHTS
/* the problem was I wasn't getting the pivotIndex and so the end or start (for left or right) wasn't properly recursively sorting because it never had the right bounds to sort.
 * How do prevent this in the future?
 *    - it seems obvious now but I think what caught me off guard was it worked the first time when we set end or start (for left or right) when using the aux array to determine it. I suppose when we do the in-place array, this wouldn't have happened. 
 *    - see the "proposed" print helped me understand that it was the start/end that was breaking but playground kept crashing because of inf loops. Adding the `numRun` also helped me debug
 *
 *    - in-place array might be better in the end because there's less variables to keep track of.
 *    - it even works with duplicate numbers unlike the example in lesson. So that's a success
 */
</string>
			<key>ModifiedRange</key>
			<string>{0, 4592}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
