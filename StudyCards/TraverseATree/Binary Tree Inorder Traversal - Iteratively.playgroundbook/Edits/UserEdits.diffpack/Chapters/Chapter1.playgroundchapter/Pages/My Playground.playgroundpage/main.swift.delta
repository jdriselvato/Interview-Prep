<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>public class TreeNode {
    public var val: Int
    public var left: TreeNode?
    public var right: TreeNode?
    public init() { self.val = 0; self.left = nil; self.right = nil; }
    public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
    public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
        self.val = val
        self.left = left
        self.right = right
    }
}

let tree = TreeNode(1, 
                    TreeNode(2, 
                             TreeNode(3, 
                                      TreeNode(4, nil, 
                                               TreeNode(10, 
                                                        TreeNode(5, nil, nil), 
                                                        nil)
                                      ),
                                      TreeNode(20, nil, nil)
                             ), 
                             nil), 
                    TreeNode(30, nil, nil)
)

class Solution {
    func inorderTraversal(_ root: TreeNode?) -&gt; [Int] {
        guard let root = root else { return [] }
        var order: [Int] = []
        var stack: [TreeNode] = []
        var current: TreeNode? = root
        
        // if the stack isn't empty and current isn't nil
        while !stack.isEmpty || current != nil {
            if let node = current {  // we have a current
                stack.append(node) // add it to the stack
                current = node.left // make current left and continue while loop
            } else { // current is nil
                guard let node = stack.popLast() else { break } // since now we don't have a left go back to last good node and remove it since it since it meets the inorder
                current = node.right // make current right and continue while loop
                order.append(node.val)
            }
        }
        
        return order
    }
}


let order = Solution().inorderTraversal(tree)

if order == [4, 5, 10, 3, 20, 2, 1, 30] {
    print("success")
} else {
    print (order)
}

/*
 Post solution thoughts:
 - The hang up was I couldn't understand how to get the good node after all the left nodes were found and then using the right side afterwards.
 */
</string>
			<key>ModifiedRange</key>
			<string>{0, 2245}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
